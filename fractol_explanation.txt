# Beginner-Friendly Explanation of the Fractal Program

## What is a Fractal?
A fractal is a never-ending pattern that repeats itself at different scales. Think of a tree - the big branches split into smaller branches, which split into even smaller branches, creating a pattern that looks similar no matter how close you zoom in.

## What This Program Does
This program draws two types of fractals on your screen:
1. **Mandelbrot set**: A famous fractal shaped like a bug with lots of swirls
2. **Julia set**: Related to Mandelbrot, but creates different swirly patterns

## How to Use It
You run the program by typing: `./fractol mandelbrot` or `./fractol julia`

## Let's Understand How It Works

### 1. The Program Startup (lines 188-201)
```c
int main(int argc, char **argv)
{
    t_fractol fractol;

    if (argc == 1 || (argc == 2 && ft_strcmp(argv[1], "--help") == 0))
        print_usage();
    parse_args(argc, argv, &fractol);
    init_window(&fractol);
    set_default_params(&fractol);
    setup_events(&fractol);
    setup_render(&fractol);
    
    mlx_loop(fractol.mlx);
    return (0);
}
```

Think of this as the **recipe's main steps**:
- `argc` and `argv` are like a list of ingredients you provided (command line arguments)
- If you didn't provide enough ingredients or asked for help, it shows instructions
- Otherwise, it:
  1. Reads what kind of fractal you want (`parse_args`)
  2. Creates a window on your screen (`init_window`)
  3. Sets up the starting view of the fractal (`set_default_params`)
  4. Sets up keyboard and mouse controls (`setup_events`)
  5. Draws the fractal for the first time (`setup_render`)
  6. Keeps the window open and responsive (`mlx_loop`)

### 2. Understanding the Arguments (lines 97-115)
```c
void parse_args(int argc, char **argv, t_fractol *fractol)
{
    if (argc < 2)
        error_exit(ERROR_ARGS);
    if (ft_strcmp(argv[1], "mandelbrot") == 0)
        fractol->fractal_type = MANDELBROT;
    else if (ft_strcmp(argv[1], "julia") == 0)
    {
        fractol->fractal_type = JULIA;
        if (argc >= 4)
        {
            fractol->julia_c.real = ft_atof(argv[2]);
            fractol->julia_c.imag = ft_atof(argv[3]);
        }
    }
    else
        error_exit(ERROR_ARGS);
}
```

This is like **checking your order at a restaurant**:
- If you didn't specify what fractal you want, it shows an error
- If you asked for "mandelbrot", it sets that type
- If you asked for "julia", it sets that type
  - If you also provided two numbers, it uses them to customize the Julia set
  - These numbers are called "complex constants" and change the pattern
- If you asked for anything else, it shows an error

### 3. Setting Default Parameters (lines 82-95)
```c
void set_default_params(t_fractol *fractol)
{
    fractol->max_iterations = MAX_ITERATIONS;
    fractol->color_scheme = COLOR_SCHEME_1;
    fractol->julia_mouse_track = 0;
    
    if (fractol->fractal_type == MANDELBROT)
        set_mandelbrot_params(fractol);
    else if (fractol->fractal_type == JULIA)
        set_julia_params(fractol);
}
```

This is like **setting up your camera before taking a picture**:
- `max_iterations`: How detailed the fractal will be (like camera resolution)
- `color_scheme`: What colors to use (like a photo filter)
- Then it sets specific settings for either Mandelbrot or Julia (like zoom level)

### 4. Creating the Window (lines 144-161)
```c
void init_window(t_fractol *fractol)
{
    char window_title[50];

    fractol->mlx = mlx_init();
    if (!fractol->mlx)
        error_exit(ERROR_MLX);
    
    create_window_title(fractol, window_title);
    fractol->win = mlx_new_window(fractol->mlx, WIDTH, HEIGHT, window_title);
    if (!fractol->win)
    {
        mlx_destroy_display(fractol->mlx);
        free(fractol->mlx);
        error_exit(ERROR_WINDOW);
    }
    init_image(fractol);
}
```

This is like **setting up a canvas to paint on**:
- `mlx_init()`: Prepare the computer for graphics (like getting your paints ready)
- `create_window_title`: Make a title for the window
- `mlx_new_window`: Create the actual window on your screen (like placing a blank canvas)
- `init_image`: Create a place in memory to draw the fractal before showing it (like a rough sketch)

### 5. Setting Up Controls (lines 164-170)
```c
void setup_events(t_fractol *fractol)
{
    mlx_hook(fractol->win, KEY_PRESS, 0, handle_key, fractol);
    mlx_hook(fractol->win, CLIENT_EXIT, 0, close_window, fractol);
    mlx_mouse_hook(fractol->win, handle_mouse, fractol);
    mlx_hook(fractol->win, MOUSE_MOVE, 0, handle_mouse_move, fractol);
}
```

This is like **connecting buttons to a machine**:
- Each `mlx_hook` connects a specific action (pressing a key, moving the mouse, etc.) to a specific function that handles that action
- When you press a key, `handle_key` will run
- When you click or scroll the mouse, `handle_mouse` will run
- When you move the mouse, `handle_mouse_move` will run
- When you try to close the window, `close_window` will run

### 6. The Math Behind Fractals (not shown in this file)

The actual drawing happens in other files, but here's the basic idea:

For each pixel on the screen:
1. Convert the pixel position to a point in the mathematical "complex plane"
2. Apply a mathematical formula over and over:
   - For Mandelbrot: z = z² + c (where c is the point we're checking)
   - For Julia: z = z² + c (where c is a constant, and z starts as the point we're checking)
3. Count how many iterations before the value gets too big (escapes)
4. Color the pixel based on how many iterations it took

This repeated application of a simple formula is what creates the beautiful, infinitely detailed patterns.

### 7. The Error Handling (lines 2-7)
```c
void error_exit(char *message)
{
    ft_printf("%s\n", message);
    exit(1);
}
```

This is like a **safety system** - if anything goes wrong, it:
1. Shows an error message
2. Safely shuts down the program (exit(1))

### 8. The Cleanup System (lines 10-22)
```c
void clean_exit(t_fractol *fractol, int exit_code)
{
    if (fractol->img.img_ptr)
        mlx_destroy_image(fractol->mlx, fractol->img.img_ptr);
    if (fractol->win)
        mlx_destroy_window(fractol->mlx, fractol->win);
    if (fractol->mlx)
    {
        mlx_destroy_display(fractol->mlx);
        free(fractol->mlx);
    }
    exit(exit_code);
}
```

This is like **cleaning up after cooking** - it:
1. Frees up all the memory the program was using
2. Closes all windows
3. Makes sure the computer doesn't waste resources after the program ends

## Summary
1. The program reads your command to decide which fractal to draw
2. It creates a window and sets up controls
3. It calculates the color of each pixel using mathematical formulas
4. It lets you interact with the fractal (zoom, move, change colors)
5. When you're done, it cleans up resources and exits

Try running the program with different options like:
- `./fractol mandelbrot` - View the classic Mandelbrot set
- `./fractol julia` - View a default Julia set
- `./fractol julia 0.285 0.01` - Try a custom Julia set with these parameters

Have fun exploring the infinite patterns of fractals!

